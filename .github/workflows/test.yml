name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Type checking with mypy
      run: |
        mypy --install-types --non-interactive .
      continue-on-error: true  # Type checking errors shouldn't fail the build initially

    - name: Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . --severity-level medium
      continue-on-error: true

    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=./ --cov-report=xml --cov-report=html -m "not slow"

    - name: Run integration tests
      run: |
        pytest tests/integration/ -v -m "not slow and not bigquery"
      env:
        # Set test environment variables
        BIGQUERY_TEST_PROJECT: ${{ secrets.BIGQUERY_TEST_PROJECT }}
        BIGQUERY_TEST_DATASET: ${{ secrets.BIGQUERY_TEST_DATASET }}

    - name: Run security tests
      run: |
        pytest tests/security/ -v

    - name: Run data quality tests
      run: |
        pytest tests/data_quality/ -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          safety-report.json
          pytest-report.html

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      if: ${{ secrets.GCP_SA_KEY }}
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      if: ${{ secrets.GCP_SA_KEY }}

    - name: Run BigQuery integration tests
      run: |
        pytest tests/integration/ -v -m "bigquery" --tb=short
      env:
        BIGQUERY_TEST_PROJECT: ${{ secrets.BIGQUERY_TEST_PROJECT }}
        BIGQUERY_TEST_DATASET: ${{ secrets.BIGQUERY_TEST_DATASET }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      continue-on-error: true

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run end-to-end tests
      run: |
        pytest tests/e2e/ -v --tb=short -m "not slow"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
        BIGQUERY_TEST_PROJECT: ${{ secrets.BIGQUERY_TEST_PROJECT }}
      timeout-minutes: 30

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run performance tests
      run: |
        pytest tests/e2e/test_performance.py -v --tb=short
      timeout-minutes: 45

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          performance-*.json
          memory-profile-*.log

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Run comprehensive code quality checks
      run: |
        # Security scanning
        bandit -r . -ll

        # Dependency vulnerability scanning
        safety check

        # Code complexity analysis
        flake8 . --max-complexity=15 --statistics

        # Documentation coverage (if using interrogate)
        # interrogate -v .

    - name: Generate code quality report
      run: |
        echo "## Code Quality Report" > code-quality-report.md
        echo "Generated on: $(date)" >> code-quality-report.md
        echo "" >> code-quality-report.md

        echo "### Security Scan Results" >> code-quality-report.md
        bandit -r . -f txt >> code-quality-report.md || true

        echo "" >> code-quality-report.md
        echo "### Dependency Vulnerability Scan" >> code-quality-report.md
        safety check --output text >> code-quality-report.md || true

    - name: Upload code quality report
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-report
        path: code-quality-report.md